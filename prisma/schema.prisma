generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}




model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// // Optional for WebAuthn support
// model Authenticator {
//   credentialID         String  @unique
//   userId               String
//   providerAccountId    String
//   credentialPublicKey  String
//   counter              Int
//   credentialDeviceType String
//   credentialBackedUp   Boolean
//   transports           String?
 
//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
//   @@id([userId, credentialID])
// }










model CatTasks {
  name  String  @id @unique
  Tasks Tasks[]

  @@map("cattasks")
}

model Tasks {
  id         Int      @id @default(autoincrement())
  category   String
  text       String
  r_category CatTasks @relation(fields: [category], references: [name])

  @@map("tasks")
}

model BlogPosts {
  id           Int            @id @unique @default(autoincrement())
  img          String?
  tittle       String
  category     String
  content      String
  autor        String
  date         DateTime       @default(now())
  BlogComments BlogComments[]
}

model BlogComments {
  id        Int       @id @unique @default(autoincrement())
  autor     String
  comment   String
  post_id   Int
  date      DateTime  @default(now())
  r_post_id BlogPosts @relation(fields: [post_id], references: [id], onDelete: Cascade)
}
